#!/usr/bin/env sh

## Description: Unpacks all recipes' dependencies into the main `composer.json`.
## Usage: unpack
## Example: "ddev unpack"
## Example: "ddev unpack /path/to/project"

# Stop this entire script if any one command fails.
set -e

# The path to the built code base may have been passed in; this is
# currently used by our CI process.
BUILD_DIR=${1:-$PWD}

# Copy all patch definitions into a dedicated file.
PATCHES=$BUILD_DIR/patches.json
echo -n '{"patches":' > $PATCHES
composer config extra.patches --working-dir=dxpr_cms_patches >> $PATCHES
echo -n '}' >> $PATCHES

# Assume all recipes are located in the current directory.
recipes=$(find . -maxdepth 1 -type d -name 'dxpr_cms*' -printf "drupal/%P\n")

# Switch into the project directory to start modifying it.
cd $BUILD_DIR

# Configure and install the unpack plugin.
composer config allow-plugins.ewcomposer/unpack true
composer config repositories.unpack vcs https://gitlab.ewdev.ca/yonas.legesse/drupal-recipe-unpack.git
composer require --dev ewcomposer/unpack:dev-master

# First, unpack all the dependencies. Since recipes can depend on other recipes, we
# need to do this step separately from removing the recipes.
for name in $recipes; do
  composer unpack $name
  echo "Unpacked $name"
done

# Now that everything is unpacked, we can remove all the recipes from `composer.json`.
for name in $recipes; do
  composer remove --quiet --no-update $name
done

# Remove the unpacked recipes, along with the unpack plugin itself.
composer remove --minimal-changes --dev ewcomposer/unpack
composer config --unset allow-plugins.ewcomposer/unpack
composer config --unset repositories.unpack
